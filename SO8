#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <time.h>
#include <stdio.h>
#define HEADER 54
int isBMPFile(const char *filename) {
    FILE *file = fopen(filename, "rb");
    if (file == NULL) {
        perror("Eroare la deschiderea fisierului");
        return 0; // returnează fals dacă fișierul nu poate fi deschis
    }

    char signature[3]; // "BM" + terminatorul null
    fread(signature, 1, 2, file);
    signature[2] = '\0'; // adăugăm terminatorul null pentru a forma un șir

    fclose(file);

    // Verificăm dacă semnătura corespunde cu cea a unui fișier BMP
    if (strcmp(signature, "BM") == 0) {
        return 1; // returnează adevărat dacă semnătura este cea a unui fișier BMP
    }

    return 0; // returnează fals în caz contrar
}
int isDirectory(const char *path) {
    struct stat fileStat;

    if (stat(path, &fileStat) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisier");
        return 0; // returnează fals dacă nu se pot obține informațiile despre fișier
    }

    if (S_ISDIR(fileStat.st_mode)) {
        return 1; // returnează adevărat dacă fișierul specificat este un director
    }

    return 0; // returnează fals dacă fișierul nu este un director
}
int isRegularFileWithoutBMPExtension(const char *path) {
    struct stat fileStat;

    if (stat(path, &fileStat) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisier");
        return 0; // returnează fals dacă nu se pot obține informațiile despre fișier
    }

    if (S_ISREG(fileStat.st_mode)) { // Verificăm dacă este un fișier obișnuit
        // Verificăm dacă fișierul nu are extensia .bmp
        const char *extension = ".bmp";
        size_t len = strlen(path);

        if (len >= strlen(extension) && strcmp(path + len - strlen(extension), extension) != 0) {
            return 1; // returnează adevărat dacă este un fișier obișnuit și nu are extensia .bmp
        }
    }

    return 0; // returnează fals în caz contrar
}
int isSymbolicLinkToFile(const char *path) {
    struct stat fileStat;

    if (lstat(path, &fileStat) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisier");
        return 0; // returnează fals dacă nu se pot obține informațiile despre fișier
    }

    // Verificăm dacă este o legătură simbolică
    if (S_ISLNK(fileStat.st_mode)) {
        // Obținem informații despre fișierul la care indică legătura simbolică
        struct stat targetStat;
        if (stat(path, &targetStat) == -1) {
            perror("Eroare la obtinerea informatiilor despre legatura simbolica");
            return 0;
        }

        // Verificăm dacă fișierul la care indică legătura simbolică este un fișier obișnuit
        if (S_ISREG(targetStat.st_mode)) {
            return 1; // returnează adevărat dacă este o legătură simbolică către un fișier obișnuit
        }
    }

    return 0; // returnează fals în caz contrar
}
int getSymbolicLinkSize(const char *path) {
    struct stat fileStat;

    if (lstat(path, &fileStat) == -1) {
        perror("Eroare la obtinerea informatiilor despre legatura simbolica");
        return -1; // returnează -1 în caz de eroare
    }

    if (!S_ISLNK(fileStat.st_mode)) {
        printf("Fisierul specificat nu este o legatura simbolica.\n");
        return -1; // returnează -1 dacă calea specificată nu este o legătură simbolică
    }

    // Aflăm dimensiunea legăturii simbolice
    ssize_t linkSize = readlink(path, (char *)malloc(sizeof(char) * 256), 256);
    if (linkSize == -1) {
        perror("Eroare la aflarea dimensiunii legaturii simbolice");
        return -1; // returnează -1 în caz de eroare
    }

    return linkSize; // returnează dimensiunea legăturii simbolice
}
int getTargetFileSize(const char *path) {
    struct stat fileStat;

    if (lstat(path, &fileStat) == -1) {
        perror("Eroare la obtinerea informatiilor despre legatura simbolica");
        return -1; // returnează -1 în caz de eroare
    }

    if (!S_ISLNK(fileStat.st_mode)) {
        printf("Fisierul specificat nu este o legatura simbolica.\n");
        return -1; // returnează -1 dacă calea specificată nu este o legătură simbolică
    }

    // Obținem informații despre fișierul target
    if (stat(path, &fileStat) == -1) {
        perror("Eroare la obtinerea informatiilor despre fisierul target");
        return -1; // returnează -1 în caz de eroare
    }

    return fileStat.st_size; // returnează dimensiunea fișierului target
}
void BandW_BMPFile(const char* path) {
    if (isBMPFile(path)) {
        FILE *fp = fopen(path, "rb+");
        if (fp == NULL) {
            perror("Error opening file");
            return;
        }

        unsigned char header[HEADER], red[1], green[1], blue[1], length[4], width[4];
        fseek(fp, 18, SEEK_SET);
        fread(length, sizeof(unsigned char), 4, fp);
        fread(width, sizeof(unsigned char), 4, fp);
        for (int i = 0; i < atoi(length) * atoi(width); i++) {
            fseek(fp, 54 + 3 * i, SEEK_SET);
            fread(red, sizeof(unsigned char), 1, fp);
            fread(green, sizeof(unsigned char), 1, fp);
            fread(blue, sizeof(unsigned char), 1, fp);
            float grey = 0.299 * atoi(red) + 0.587 * atoi(green) + 0.114 * atoi(blue);
            fseek(fp, 54 + 3 * i, SEEK_SET);
            //fwrite(grey,sizeof(unsigned char), 1,fp);
            //fwrite(grey,sizeof(unsigned char), 1,fp);
            //fwrite(grey,sizeof(unsigned char), 1,fp);
        }
    }
}
void generateFileStatistics(const char* filename, const char* header,const char* output){
    if(isBMPFile(filename)) {
        int width, height;
        memcpy(&width, header + 18, 4);
        memcpy(&height, header + 22, 4);

        struct stat fileStat;
        stat(filename, &fileStat);

        char modifDate[40];
        strftime(modifDate, sizeof(modifDate), "%d.%m.%Y", localtime(&fileStat.st_mtime));

        char result[1000];
        sprintf(result, "File Name: %s\nHeight: %d\nWidth: %d\nSize: %ld\nUser ID: %d\n",
                filename, height, width, fileStat.st_size, fileStat.st_uid);
        sprintf(result + strlen(result), "Last Modified Time: %s\nLink Count: %ld\n",
                modifDate, fileStat.st_nlink);
        sprintf(result + strlen(result), "User Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRUSR) ? 'R' : '-',
                (fileStat.st_mode & S_IWUSR) ? 'W' : '-',
                (fileStat.st_mode & S_IXUSR) ? 'X' : '-');
        sprintf(result + strlen(result), "Group Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRGRP) ? 'R' : '-',
                (fileStat.st_mode & S_IWGRP) ? 'W' : '-',
                (fileStat.st_mode & S_IXGRP) ? 'X' : '-');
        sprintf(result + strlen(result), "Others Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IROTH) ? 'R' : '-',
                (fileStat.st_mode & S_IWOTH) ? 'W' : '-',
                (fileStat.st_mode & S_IXOTH) ? 'X' : '-');

        int outFile = open(output, O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
        if (outFile == -1) {
            perror("Couldn't create the file");
            exit(-1);
        }

        if (write(outFile, result, strlen(result)) == -1) {
            perror("Couldn't write to the file");
            exit(-1);
        }

        close(outFile);
    }
    else
    if(isDirectory(filename))
    {
        struct stat fileStat;
        stat(filename, &fileStat);
        char result[1000];
        sprintf(result, "File Name: %s\nUser ID: %d\n",
                filename , fileStat.st_uid);
        sprintf(result + strlen(result), "User Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRUSR) ? 'R' : '-',
                (fileStat.st_mode & S_IWUSR) ? 'W' : '-',
                (fileStat.st_mode & S_IXUSR) ? 'X' : '-');
        sprintf(result + strlen(result), "Group Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRGRP) ? 'R' : '-',
                (fileStat.st_mode & S_IWGRP) ? 'W' : '-',
                (fileStat.st_mode & S_IXGRP) ? 'X' : '-');
        sprintf(result + strlen(result), "Others Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IROTH) ? 'R' : '-',
                (fileStat.st_mode & S_IWOTH) ? 'W' : '-',
                (fileStat.st_mode & S_IXOTH) ? 'X' : '-');
        int outFile = open(output, O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
        if (outFile == -1) {
            perror("Couldn't create the file");
            exit(-1);
        }

        if (write(outFile, result, strlen(result)) == -1) {
            perror("Couldn't write to the file");
            exit(-1);
        }

        close(outFile);
    }
    else
    if(isRegularFileWithoutBMPExtension(filename))
    {
        struct stat fileStat;
        stat(filename, &fileStat);

        char modifDate[40];
        strftime(modifDate, sizeof(modifDate), "%d.%m.%Y", localtime(&fileStat.st_mtime));

        char result[1000];
        sprintf(result, "File Name: %s %ld\nSize: %ld\nUser ID: %d\n",
                filename, (long)fileStat.st_size, (long)fileStat.st_uid);
        sprintf(result + strlen(result), "Last Modified Time: %s\nLink Count: %ld\n",
                modifDate, fileStat.st_nlink);
        sprintf(result + strlen(result), "User Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRUSR) ? 'R' : '-',
                (fileStat.st_mode & S_IWUSR) ? 'W' : '-',
                (fileStat.st_mode & S_IXUSR) ? 'X' : '-');
        sprintf(result + strlen(result), "Group Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRGRP) ? 'R' : '-',
                (fileStat.st_mode & S_IWGRP) ? 'W' : '-',
                (fileStat.st_mode & S_IXGRP) ? 'X' : '-');
        sprintf(result + strlen(result), "Others Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IROTH) ? 'R' : '-',
                (fileStat.st_mode & S_IWOTH) ? 'W' : '-',
                (fileStat.st_mode & S_IXOTH) ? 'X' : '-');

        int outFile = open(output, O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
        if (outFile == -1) {
            perror("Couldn't create the file");
            exit(-1);
        }

        if (write(outFile, result, strlen(result)) == -1) {
            perror("Couldn't write to the file");
            exit(-1);
        }

        close(outFile);
    }
    else
    if(isSymbolicLinkToFile(filename))
    {
        struct stat fileStat;
        stat(filename, &fileStat);

        char modifDate[40];
        strftime(modifDate, sizeof(modifDate), "%d.%m.%Y", localtime(&fileStat.st_mtime));

        char result[1000];
        sprintf(result, "File Name: %s File size: %d TargetFile size: %d %ld\nSize: %ld\nUser ID: %d\n",
                filename, getSymbolicLinkSize(filename), getTargetFileSize(filename), (long)fileStat.st_size, (long)fileStat.st_uid);
        sprintf(result + strlen(result), "User Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRUSR) ? 'R' : '-',
                (fileStat.st_mode & S_IWUSR) ? 'W' : '-',
                (fileStat.st_mode & S_IXUSR) ? 'X' : '-');
        sprintf(result + strlen(result), "Group Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IRGRP) ? 'R' : '-',
                (fileStat.st_mode & S_IWGRP) ? 'W' : '-',
                (fileStat.st_mode & S_IXGRP) ? 'X' : '-');
        sprintf(result + strlen(result), "Others Access Rights: %c%c%c\n",
                (fileStat.st_mode & S_IROTH) ? 'R' : '-',
                (fileStat.st_mode & S_IWOTH) ? 'W' : '-',
                (fileStat.st_mode & S_IXOTH) ? 'X' : '-');
        int outFile = open(output, O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
        if (outFile == -1) {
            perror("Couldn't create the file");
            exit(-1);
        }

        if (write(outFile, result, strlen(result)) == -1) {
            perror("Couldn't write to the file");
            exit(-1);
        }

        close(outFile);
    }
}
void process(const char* path, const char* header, const char* output) {
    pid_t pid = fork();
    switch (pid) {
        case -1:
            /* eroare la fork */
            printf("EXIT_FAILURE;");
            exit(-1);
        case 0:
            /* proces copil */
            BandW_BMPFile(path);
            break;
        default:
            /* proces părinte */
            generateFileStatistics(path, header, output);
            break;
    }
}
int main(int argc, char** argv) {
    if (argc != 3) {
        printf("Usage: ./program <filename> <output_filename>\n");
        exit(-1);
    }

    int inputFile = open(argv[1], O_RDONLY);
    if (inputFile == -1) {
        perror("Couldn't open the file\n");
        exit(-1);
    }

    char header[HEADER + 1];
    ssize_t count = read(inputFile, header, HEADER);
    if (count < HEADER) {
        printf("Couldn't read the header, %zd\n", count);
        exit(-1);
    }

    process(argv[1], header, argv[2]);

    close(inputFile);

    return 0;
}
